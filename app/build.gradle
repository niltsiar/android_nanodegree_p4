import org.ajoberstar.grgit.Grgit
import org.eclipse.jgit.errors.RepositoryNotFoundException

apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'me.tatarka.retrolambda'

//Version information
def versionMajor = VERSION_MAJOR.toInteger()
def versionMinor = VERSION_MINOR.toInteger()
def versionPatch = VERSION_PATCH.toInteger()
def versionRevision = getRevision()

def appVersionCode = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100
def appVersionName = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion versions.androidSdk.compile
    buildToolsVersion versions.androidSdk.buildTools
    compileOptions {
        sourceCompatibility versions.sourceCompatibility
        targetCompatibility versions.targetCompatibility
    }
    defaultConfig {
        applicationId "com.udacity.gradle.builditbigger"
        minSdkVersion versions.androidSdk.min
        targetSdkVersion versions.androidSdk.target
        versionCode appVersionCode
        versionName appVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':jokes')
    compile project(':jokesui')
    compile project(path: ':backend', configuration: 'android-endpoints')

    compile libraries.app.supportAppCompatV7
    compile libraries.app.playServices
    compile libraries.app.findbugs

    androidTestCompile(libraries.test.espressoCore, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    retrolambdaConfig libraries.retrolambda.config
}

android.applicationVariants.all { variant ->
    if (variant.buildType.name == "debug") {
        variant.mergedFlavor.versionName += "-${versionRevision}"
    }
}

def static getRevision() {
    def revision
    try {
        revision = getGitRevision()
    } catch (RepositoryNotFoundException e) {
        revision = 0
    }
    return revision
}

def static getGitRevision() {
    def git = Grgit.open(dir: '.')
    return git.head().abbreviatedId
}
